generator client {
  provider = "prisma-client-js"
}

datasource db {
  // provider  = "postgresql"
  provider  = "sqlite"
  url       = env("DATABASE_PROXY_URL")
  directUrl = env("DATABASE_URL")
}

model User {
  id                   String              @id @default(uuid())
  xp                   Int                 @default(0)
  lastXpTime           DateTime            @default(now())
  lastReputationGiven  DateTime            @default(now())
  isEditing            Boolean             @default(false)
  reputation           Int                 @default(0)
  coins                Int                 @default(0)
  afkMessage           String?
  profilePreferences   ProfilePreferences? @relation(fields: [profilePreferencesId], references: [id])
  characters           Character[]
  npcs                 NPC[]
  isUsingNPC           Boolean             @default(false)
  heartedMessages      Message[]
  messages             Message[]           @relation("userMessages")
  profilePreferencesId Int?                @unique
}

model ProfilePreferences {
  id    Int    @id @default(autoincrement())
  about String @default("")

  backgroundUrl String?

  xpBarFillColor          String?
  xpBarBackgroundColor    String?
  textColor               String?
  repBarColor             String?
  featuredCharBorderColor String?

  user   User?
  userId String?
}

model NPC {
  id          Int       @id @default(autoincrement())
  name        String
  imageUrl    String
  rarity      String    @default("common")
  prefix      String
  title       String?
  description String?
  iconUrl     String?
  messages    Message[]
  usersWhoOwn User[]
}

model Character {
  id          Int                   @id @default(autoincrement())
  name        String?
  slug        String?
  surname     String?
  personality String?
  appearance  String?
  imageUrl    String?
  backstory   String?
  age         String?
  height      String?
  gender      String?
  weight      String?
  isPending   Boolean               @default(true)
  isBeingUsed Boolean               @default(false)
  user        User                  @relation(fields: [userId], references: [id], onDelete: Cascade)
  race        Race?                 @relation(fields: [raceId], references: [id], onDelete: SetNull)
  faction     Faction?              @relation(fields: [factionId], references: [id])
  userId      String
  raceId      Int?

  lastMarriedId   Int?                
  lastMarriedTo   Character?          @relation("marriage", fields: [lastMarriedId], references: [id], onDelete: SetNull)
  marriedTo   Character[]         @relation("marriage")

  messages    Message[]
  instruments InstrumentCharacter[]
  factionId   Int?
}

model Message {
  id                 String     @id @unique
  content            String
  channel            Channel    @relation(fields: [channelId], references: [id], onDelete: Cascade)
  character          Character? @relation(fields: [characterId], references: [id], onDelete: Cascade)
  npc                NPC?       @relation(fields: [npcId], references: [id], onDelete: Cascade)
  channelId          String
  starboardMessageId String?
  characterId        Int?
  npcId              Int?
  author             User       @relation("userMessages", fields: [authorId], references: [id])
  authorId           String
  hearts             User[]
}

model Race {
  id          Int         @id @default(autoincrement())
  name        String
  description String
  imageUrl    String
  characters  Character[]
}

model Faction {
  id          Int         @id @default(autoincrement())
  name        String
  description String
  imageUrl    String
  emoji       String
  characters  Character[]
}

model InstrumentCharacter {
  id           Int         @id @unique @default(autoincrement())
  quantity     Int         @default(0)
  character    Character?  @relation(fields: [characterId], references: [id], onDelete: Cascade)
  instrument   Instrument? @relation(fields: [instrumentId], references: [id], onDelete: Cascade)
  characterId  Int?
  instrumentId Int?

  @@unique([characterId, instrumentId], name: "unique_character_instrument")
}

model Instrument {
  id          Int                   @id @default(autoincrement())
  name        String
  description String
  isBeginner  Boolean               @default(false)
  messageId   String?
  imageUrl    String
  characters  InstrumentCharacter[]
}

model Channel {
  id                   String    @id @unique
  name                 String
  description          String?
  imageUrl             String?
  placeholderMessageId String?
  lastTimeActive       DateTime  @default(now())
  messages             Message[]
}
